name: Build and Push Frontend and Backend Image to ECR

on:
  push:
    branches: [dev]

jobs:
  # 0) Run tests
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: dev

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run tests
        run: |
          cd frontend
          npm run test:ci

  # 1) Bump version in a single job, store it as output
  bump-version:
    if: github.actor == 'tsuki-yo'
    runs-on: ubuntu-latest
    needs: [test]
    outputs:
      new_tag: ${{ steps.increment-git-tag.outputs.new_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: dev

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          bash ./.github/script/git_update.sh -v patch

  # 2) Build frontend, using the single version from bump-version
  build-frontend:
    if: github.actor == 'tsuki-yo'
    runs-on: ubuntu-latest
    needs: [bump-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: dev

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR 
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build, Tag, and Push Frontend
        run: |
          FRONTEND_TAG=${{ needs.bump-version.outputs.new_tag }}
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-frontend:${FRONTEND_TAG} -f frontend/Dockerfile frontend/
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-frontend:${FRONTEND_TAG}

  # 3) Build backend, using the same version from bump-version
  build-backend:
    if: github.actor == 'tsuki-yo'
    runs-on: ubuntu-latest
    needs: [bump-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: dev

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR 
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build, Tag, and Push Backend
        run: |
          BACKEND_TAG=${{ needs.bump-version.outputs.new_tag }}
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-backend:${BACKEND_TAG} -f backend/Dockerfile backend/
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-backend:${BACKEND_TAG}

  # 4) Build AI service, using the same version from bump-version
  build-ai-service:
    if: github.actor == 'tsuki-yo'
    runs-on: ubuntu-latest
    needs: [bump-version]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: dev

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR 
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build, Tag, and Push AI Service
        run: |
          AI_SERVICE_TAG=${{ needs.bump-version.outputs.new_tag }}
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-ai-service:${AI_SERVICE_TAG} -f ai-service/Dockerfile ai-service/
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-ai-service:${AI_SERVICE_TAG}

  # 5) Handle manifest-only changes (always runs, regardless of code changes)
  deploy-manifests:
    if: github.actor == 'tsuki-yo'
    runs-on: ubuntu-latest
    needs: [test]  # Only needs tests to pass, not image builds
    steps:
      - name: Checkout dev
        uses: actions/checkout@v2
        with:
          ref: dev
          fetch-depth: 0

      - name: Check for manifest changes
        id: check-manifests
        run: |
          # Check if this push contains manifest changes
          if git diff --name-only HEAD~1 HEAD | grep -E '^infra/k8s/'; then
            echo "manifest_changes=true" >> $GITHUB_OUTPUT
          else
            echo "manifest_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Sync manifest changes to deploy branch
        if: steps.check-manifests.outputs.manifest_changes == 'true'
        run: |
          echo "Manifest changes detected, ensuring deploy branch is updated..."
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Fetch deploy branch
          git fetch origin deploy:deploy || echo "Deploy branch may not exist yet"
          
          # Check if deploy branch is behind dev for manifests
          git checkout deploy
          git merge dev --no-ff -m "Deploy manifest changes from dev"
          git push origin deploy

      - name: Trigger ArgoCD sync (if manifest changes)
        if: steps.check-manifests.outputs.manifest_changes == 'true'
        run: |
          echo "Manifest changes deployed to deploy branch"
          echo "ArgoCD should automatically detect and sync these changes"
