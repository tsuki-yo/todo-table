name: Promote Staging Artifacts to Production

on:
  push:
    branches: [main]

jobs:
  # 1) Get the latest staging version to promote
  get-version:
    if: github.actor == 'tsuki-yo'
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.get-tag.outputs.version_tag }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v2
        with:
          ref: main
          fetch-depth: 0  # Fetch all history for tags

      - name: Get latest version tag
        id: get-tag
        run: |
          # Get the latest semantic version tag from main branch
          git fetch origin --tags --quiet
          LATEST_TAG=$(git tag -l --sort=version:refname | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | tail -n 1)
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No version tags found on main branch"
            exit 1
          fi
          
          echo "Latest version tag: $LATEST_TAG"
          echo "version_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

  # 2) Promote frontend image
  promote-frontend:
    if: github.actor == 'tsuki-yo'
    runs-on: ubuntu-latest
    needs: [get-version]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Staging ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Pull staging frontend image
        run: |
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-frontend:${{ needs.get-version.outputs.version_tag }}

      - name: Login to Production ECR  
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin 476114111588.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Tag and push to production ECR
        run: |
          docker tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-frontend:${{ needs.get-version.outputs.version_tag }} \
                     476114111588.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-frontend:${{ needs.get-version.outputs.version_tag }}
          docker push 476114111588.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-frontend:${{ needs.get-version.outputs.version_tag }}

  # 3) Promote backend image
  promote-backend:
    if: github.actor == 'tsuki-yo'
    runs-on: ubuntu-latest
    needs: [get-version]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Staging ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Pull staging backend image
        run: |
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-backend:${{ needs.get-version.outputs.version_tag }}

      - name: Login to Production ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin 476114111588.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Tag and push to production ECR
        run: |
          docker tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-backend:${{ needs.get-version.outputs.version_tag }} \
                     476114111588.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-backend:${{ needs.get-version.outputs.version_tag }}
          docker push 476114111588.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-backend:${{ needs.get-version.outputs.version_tag }}

  # 4) Promote AI service image
  promote-ai-service:
    if: github.actor == 'tsuki-yo'
    runs-on: ubuntu-latest
    needs: [get-version]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Staging ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Pull staging AI service image
        run: |
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-ai-service:${{ needs.get-version.outputs.version_tag }}

      - name: Login to Production ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin 476114111588.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Tag and push to production ECR
        run: |
          docker tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-ai-service:${{ needs.get-version.outputs.version_tag }} \
                     476114111588.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-ai-service:${{ needs.get-version.outputs.version_tag }}
          docker push 476114111588.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/todo-ai-service:${{ needs.get-version.outputs.version_tag }}

  # 5) Summary
  promotion-complete:
    if: github.actor == 'tsuki-yo'
    runs-on: ubuntu-latest
    needs: [get-version, promote-frontend, promote-backend, promote-ai-service]
    steps:
      - name: Promotion Summary
        run: |
          echo "‚úÖ Artifact promotion completed successfully!"
          echo "üì¶ Promoted version: ${{ needs.get-version.outputs.version_tag }}"
          echo "üéØ Services promoted: frontend, backend, ai-service"
          echo "üè∑Ô∏è  From: staging ECR (881490098269) ‚Üí production ECR (476114111588)"
          echo "üöÄ ArgoCD will automatically deploy these artifacts to production cluster"