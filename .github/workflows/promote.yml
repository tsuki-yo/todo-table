name: Promote to Production

on:
  push:
    branches: [main]

jobs:
  promote:
    if: github.actor == 'tsuki-yo'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Need full history for tags

      - name: Configure AWS Credentials for Staging
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get latest images from staging ECR
        id: get-tag
        run: |
          # Get the latest image tag from each repository in staging ECR
          echo "Getting latest image versions from staging ECR..."
          
          # Get latest tags for each service
          FRONTEND_TAG=$(aws ecr describe-images \
            --repository-name todo-frontend \
            --region ${{ secrets.AWS_REGION }} \
            --query 'sort_by(imageDetails[?imageTags!=`null`],& imagePushedAt)[-1].imageTags[0]' \
            --output text)
          
          BACKEND_TAG=$(aws ecr describe-images \
            --repository-name todo-backend \
            --region ${{ secrets.AWS_REGION }} \
            --query 'sort_by(imageDetails[?imageTags!=`null`],& imagePushedAt)[-1].imageTags[0]' \
            --output text)
          
          AI_SERVICE_TAG=$(aws ecr describe-images \
            --repository-name todo-ai-service \
            --region ${{ secrets.AWS_REGION }} \
            --query 'sort_by(imageDetails[?imageTags!=`null`],& imagePushedAt)[-1].imageTags[0]' \
            --output text)
          
          echo "Frontend latest: $FRONTEND_TAG"
          echo "Backend latest: $BACKEND_TAG"
          echo "AI Service latest: $AI_SERVICE_TAG"
          
          # Use the minimum version to ensure all services have this version
          MIN_TAG=$(echo -e "$FRONTEND_TAG\n$BACKEND_TAG\n$AI_SERVICE_TAG" | sort -V | head -1)
          echo "Using common version: $MIN_TAG (minimum across all services)"
          
          # Verify all services have this version
          for SERVICE in frontend backend ai-service; do
            if ! aws ecr describe-images \
              --repository-name todo-$SERVICE \
              --image-ids imageTag=$MIN_TAG \
              --region ${{ secrets.AWS_REGION }} \
              --output text >/dev/null 2>&1; then
              echo "ERROR: todo-$SERVICE:$MIN_TAG not found!"
              exit 1
            fi
          done
          
          echo "latest_tag=$MIN_TAG" >> $GITHUB_OUTPUT

      - name: Login to staging ECR
        run: |
          echo "Logging into staging ECR..."
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Pull images from staging ECR
        run: |
          TAG=${{ steps.get-tag.outputs.latest_tag }}
          STAGING_ECR="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
          
          echo "ðŸ”½ Pulling images from staging ECR..."
          for service in frontend backend ai-service; do
            echo "Pulling todo-$service:$TAG from staging..."
            docker pull $STAGING_ECR/todo-$service:$TAG
          done

      - name: Configure AWS Credentials for Production
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.PROD_ROLE_ARN }}
          role-skip-session-tagging: true

      - name: Login to production ECR and push images
        run: |
          echo "Logging into production ECR..."
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_PROD_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Promote images to production
        run: |
          TAG=${{ steps.get-tag.outputs.latest_tag }}
          STAGING_ECR="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
          PROD_ECR="${{ secrets.AWS_PROD_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com"
          
          # Tag and push all services to production
          for service in frontend backend ai-service; do
            echo "ðŸš€ Promoting todo-$service:$TAG to production..."
            
            # Tag for production ECR (images already pulled from staging)
            docker tag $STAGING_ECR/todo-$service:$TAG $PROD_ECR/todo-$service:$TAG
            
            # Push to production ECR (now using production credentials)
            docker push $PROD_ECR/todo-$service:$TAG
            
            echo "âœ… Successfully promoted todo-$service:$TAG"
          done

      - name: Update production manifests in deploy branch
        run: |
          TAG=${{ steps.get-tag.outputs.latest_tag }}
          echo "Updating production manifests to use tag: $TAG"
          
          # Checkout deploy branch where ArgoCD applications read from
          git fetch origin deploy:deploy
          git checkout deploy
          
          # Update the production kustomization to use new image tags
          sed -i "s|newTag: .*|newTag: $TAG|g" infra/k8s/environments/production/app/kustomization.yaml
          
          # Commit the updated manifests to deploy branch
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add infra/k8s/environments/production/app/kustomization.yaml
          git commit -m "chore: promote images to production $TAG" || echo "No changes to commit"
          git push origin deploy

      - name: Trigger production ArgoCD sync
        run: |
          echo "ðŸŽ¯ Production promotion completed successfully!"
          echo "Tag ${{ steps.get-tag.outputs.latest_tag }} has been promoted to production"
          echo "ArgoCD will automatically detect the manifest changes and deploy"

      - name: Send promotion notification
        run: |
          echo "ðŸ“¢ PRODUCTION DEPLOYMENT NOTIFICATION"
          echo "Version: ${{ steps.get-tag.outputs.latest_tag }}"
          echo "Promoted at: $(date)"
          echo "Promoted by: ${{ github.actor }}"
          echo "Commit: ${{ github.sha }}"